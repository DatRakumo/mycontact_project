# rest/models.py
from django.db import models
from google.cloud import ndb


class Account(ndb.Model):
    username = ndb.StringProperty()
    userid = ndb.IntegerProperty()
    email = ndb.StringProperty()


def create_entity_using_keyword_arguments():
    sandy = Account(
        username='Sandy', userid=123, email='sandy@example.com')
    return sandy


def create_entity_using_attributes():
    sandy = Account()
    sandy.username = 'Sandy'
    sandy.userid = 123
    sandy.email = 'sandy@example.com'
    return sandy


def create_entity_using_populate():
    sandy = Account()
    sandy.populate(
        username='Sandy',
        userid=123,
        email='sandy@gmail.com')
    return sandy


def demonstrate_model_constructor_type_checking():
    bad = Account(
        username='Sandy', userid='not integer')  # raises an exception
    return bad


def demonstrate_entity_attribute_type_checking(sandy):
    sandy.username = 42  # raises an exception


def save_entity(sandy):
    sandy_key = sandy.put()
    return sandy_key


def get_entity(sandy_key):
    sandy = sandy_key.get()
    return sandy


def get_key_kind_and_id(sandy_key):
    kind_string = sandy_key.kind()  # returns 'Account'
    ident = sandy_key.id()  # returns '2'
    return kind_string, ident


def get_url_safe_key(sandy_key):
    url_string = sandy_key.urlsafe()
    return url_string


def get_entity_from_url_safe_key(url_string):
    sandy_key = ndb.Key(urlsafe=url_string)
    sandy = sandy_key.get()
    return sandy


def get_key_and_numeric_id_from_url_safe_key(url_string):
    key = ndb.Key(urlsafe=url_string)
    kind_string = key.kind()
    ident = key.id()
    return key, ident, kind_string


def update_entity_from_key(key):
    sandy = key.get()
    sandy.email = 'sandy@example.co.uk'
    sandy.put()


def delete_entity(sandy):
    sandy.key.delete()


def create_entity_with_named_key():
    account = Account(
        username='Sandy', userid=1234, email='sandy@example.com',
        id='sandy@example.com')

    return account.key.id()  # returns 'sandy@example.com'


def set_key_directly(account):
    account.key = ndb.Key('Account', 'sandy@example.com')

    # You can also use the model class object itself, rather than its name,
    # to specify the entity's kind:
    account.key = ndb.Key(Account, 'sandy@example.com')


def create_entity_with_generated_id():
    # note: no id kwarg
    account = Account(username='Sandy', userid=1234, email='sandy@example.com')
    account.put()
    # account.key will now have a key of the form: ndb.Key(Account, 71321839)
    # where the value 71321839 was generated by Datastore for us.
    return account



objs = create_entity_using_attributes()

import textwrap

from django.http import HttpResponse
from django.views.generic.base import View

class HomePageView(View):

    def dispatch(request, *args, **kwargs):
        response_text = textwrap.dedent(objs)

        return HttpResponse(response_text)



